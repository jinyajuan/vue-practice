升级node   npm i -g n
           n

_________________________________________________________________
eval   动态的执行一些代码
       用法：eval(code)
_________________________________________________________________

Vue、Angular、React



MVC：
1.M Model——模型:数据
2.V View——视图：表现层
3.C Controller——控制器：业务逻辑

1.分离——简洁、测试简单
2.分工——


MVP：
1.P:   C    (隔离)
只把业务逻辑相关的代码留在P里面，则把表现相关的代码放在视图里面


1.P得到了精简——只有业务逻辑
2.视图相关的低吗，最大限度的重用

_________________________________________________________

vue
1.x
2.x   模快
_________________________________________________________________
vue好在哪里？
1.分工明确
2.工作效率高
3.统一

_________________________________________________________________
改变几个习惯
1.不要直接操作dom
2.数据为中心——数据驱动

_________________________________________________________________
1.创建vm对象
let vm=new Vue({
    el:元素选择器,
    data:{},
})
2.


_________________________________________________________________
数据绑定：
1.单项数据绑定：{{输出}}  数据=>视图
2.双向数据绑定：v-model   数据<=>视图


_________________________________________________________________
Vue里面的属性——指令

归纳：
1.输出：
    {{}}
2.双向绑定:
    v-model(输入性的组件)
3.属性绑定：
    v-bind:属性="数据"
    :属性="数据"

    eg:
        :style="jsonStyle"    //spanStyle是一个json
        :class="arr"          //arr是一个数组

4.事件
    v-on:xxx="函数"
    @:xxx="函数"

5.循环
    v-for="val,key in 数组"
    v-for="val,key in json"

6.v-show
    display

7.v-if
    删除

——————————————————————————————————————————————————————————————————
1.事件修饰符
    @事件.xxx

2.计算后属性/数据
    并不存在，其实是个公式
    有缓存的

    应用：
    1.频繁使用的复杂公式
    2.需要监控——全局的状态管理

    *不是必须的

    computed:{
        result: function(){
            return this.n1*this.n2;
        }
    }
    简写：
    computed:{
        result(){
            return this.n1*this.n2;
        }
    }

    完整的写法：
     computed:{
        result：{
            set(){},
            get(){}
        }
     }

     注意：当计算属性和data里面的属性同名时，计算属性会消失

________________________________________________________________
4.监听：
watch:

_________________________________________________________________

5.v-for
  key

  数据自动同步到视图
  1.把所有的元素都删了，重新生成一遍     性能太差
  2.找出哪些不一样                     性能很高

  vue需要能把数据和DOM组件对应起来——提高性能
  :key="数据的ID"

  vue使用key值将某一个ID和某一个DOM节点关联起来

  注意：
  key不是给用户用的，而是给vue的一个参数，提升性能

  虚拟DOM：
_________________________________________________________________
路由：
地址如果变了，调用不同的代码（就是一堆if，但是使用if 不易维护）


框架选型怎么选？
    1.团队经验
    2.框架本身的情况

双向绑定的原理？
























